### Redis事务的介绍
Redis 事务的本质是一组命令的集合。事务支持一次执行多个命令，一个事务中所有命令都会被序列化。在事务执行过程，会按照顺序串行化执行队列中的命令，其他客户端提交的命令请求不会插入到事务执行命令序列中。
* **redis事务就是一次性、顺序性、排他性的执行一个队列中的一系列命令。**
* **Redis事务没有隔离级别的概念**：批量操作在发送 EXEC 命令前被放入队列缓存，并不会被实际执行，也就不存在事务内的查询要看到事务里的更新，事务外查询不能看到。
* **Redis不保证原子性**：Redis中，单条命令是原子性执行的，但事务不保证原子性，且没有回滚。事务中任意命令执行失败，其余的命令仍会被执行。
* **Redis事务的三个阶段**：**开始事务**、**命令入队**、**执行事务**

### Redis事务的使用
**Redis事务相关命令**：
* **watch** key1 key2 ... : 监视一或多个key,如果在事务执行之前，被监视的key被其他命令改动，则事务被打断 （ 类似乐观锁 ）
* **multi**: 标记一个事务块的开始（ queued ）
* **exec**: 执行所有事务块的命令 （ 一旦执行exec后，之前加的监控锁都会被取消掉 ）　
* **discard**: 取消事务，放弃事务块中的所有命令
* **unwatch**: 取消watch对所有key的监控

```cons
> MULTI
OK
> set k1 v1
QUEUED
> set k2 v2
QUEUED
> get k2
QUEUED
> set k3 v3
QUEUED
> EXEC
OK
OK
v2
OK

```
![](https://img2020.cnblogs.com/blog/1457262/202106/1457262-20210612155726385-2060946153.png)
* 若在事务队列中存在命令性错误（类似于java编译性错误），则执行EXEC命令时，所有命令都不会执行
* 若在事务队列中存在语法性错误（类似于java的1/0的运行时异常），则执行EXEC命令时，其他正确命令会被执行，错误命令抛出异常。
> watch指令类似于乐观锁(**CAS实现,且Redis的实现机制不会出现ABA问题**)，在事务提交时，如果watch监控的多个KEY中任何KEY的值已经被其他客户端更改，则使用EXEC执行事务时，事务队列将不会被执行，同时返回Nullmulti-bulk应答以通知调用者事务执行失败。

[参考链接](https://www.cnblogs.com/DeepInThought/p/10720132.html)